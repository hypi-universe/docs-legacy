{"componentChunkName":"component---src-templates-docs-js","path":"/references/user-defined-functions","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"f8ab7be6-a10b-51a2-8d7b-7ccc70e7147c","title":"User Defined Functions","slug":"/references/12-user-defined-functions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"User Defined Functions\",\n  \"metaTitle\": \"Hypi Platform CRUD Documentation\",\n  \"metaDescription\": \"Hypi platform documentation explaining how to create and use user defined functions.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"User defined functions are a lightweight way for your apps to have custom behaviour outside of what Hypi provides.\\nThey are executed on the same server where your query is being processed.\"), mdx(\"p\", null, \"For this page we've added the following schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  callGql(app: String):App @tan(type:Groovy, name:\\\"groovy1\\\")\\n  inlineGroovyFunction(a: String, b: Int, c: Boolean):Json @tan(type:Groovy, inline: \\\"\\\"\\\"\\n    def map = new java.util.LinkedHashMap()\\n    map.put(\\\"a\\\", a)\\n    map.put(\\\"b\\\", b)\\n    map.put(\\\"c\\\", c)\\n    return map\\n  \\\"\\\"\\\")\\n\\n  inlineVelocityFunction(a: String, b: Int, c: Boolean):String @tan(type:Velocity, inline: \\\"$a,$b,$c\\\")\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@tan\"), \" directive is Hypi's mechanism for adding user defined functions to a field.\\nWhen a field containing this directive is called, the function will be executed.\"), mdx(\"p\", null, \"Hypi supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Groovy\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Velocity\"), \" templates for user defined functions.\\nGroovy is a general purpose programming language, it is fast, flexible and succinct.\\nVelocity is a templating language and framework. Usually used when you want to format some string output.\\nFor example, if you wanted to customise an email message by adding the user's name, Velocity may be a good choice.\"), mdx(\"p\", null, \"There are two ways to define user defined functions, either inline or via a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Script\"), \".\"), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inlineGroovyFunction\"), \" is an example of how to create an inline Groovy function.\\nWe deliberately used the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.util.LinkedHashMap\"), \" here to demonstrate that access to Java classes is possible.\\nA more Groovy like version could look like this :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"  inlineGroovyFunction(a: String, b: Int, c: Boolean):Json @tan(type:Groovy, inline: \\\"\\\"\\\"\\n    return [\\n      a: a,\\n      b: b,\\n      c: c\\n    ]\\n  \\\"\\\"\\\")\\n\")), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\n{\\n  inlineGroovyFunction(a:\\\"val1\\\", b:23, c: true)\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"inlineGroovyFunction\\\": {\\n      \\\"a\\\": \\\"val1\\\",\\n      \\\"b\\\": 23,\\n      \\\"c\\\": true\\n    }\\n  }\\n}\\n\")))), mdx(\"p\", null, \"As you can see, an inline function is executed in exactly the same way as any other GraphQL query.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#example","title":"Example"}]},"parent":{"__typename":"File","relativePath":"references/12-user-defined-functions.md"},"frontmatter":{"metaTitle":"Hypi Platform CRUD Documentation","metaDescription":"Hypi platform documentation explaining how to create and use user defined functions."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f8ab7be6-a10b-51a2-8d7b-7ccc70e7147c"}}}