{"componentChunkName":"component---src-templates-docs-js","path":"/references/triggers","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"f4d426c0-edaa-5bc5-8405-5830b7210903","title":"Triggers","slug":"/references/10-triggers"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Triggers\",\n  \"metaTitle\": \"Hypi Platform CRUD Documentation\",\n  \"metaDescription\": \"Hypi platform documentation for the core app's CRUD operations generated for each app\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"In many databases and some other systems, it is possible to define a trigger which is executed before or after an even has happened.\\nIn Hypi, triggers are supported with both a before and after semantics by adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@trigger\"), \" directive to a function.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Important\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Triggers can break existing functions if you decide to completely replace the output\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A trigger's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \" function is executed synchronously. i.e. it will complete before the function it is attached to\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A trigger's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \" function is executed asynchronously. i.e. the function it is attached to will return before the trigger is completed.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If a trigger's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \" function returns false, the function it is attached to will not be executed, nor will the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \" function.\")), mdx(\"p\", null, \"On this page, we use the following schema:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type PostActionData{\\n  data: Json\\n}\\n\\ntype Query {\\n  allow(values: HypiUpsertInputUnion!):Boolean @tan(type:Groovy, inline: \\\"return true\\\")\\n  disallow(values: HypiUpsertInputUnion!):Boolean @tan(type:Groovy, inline: \\\"return false\\\")\\n  deny2:Boolean @tan(type:Groovy, inline: \\\"return false\\\")\\n  deny1: Boolean @tan(type:Groovy, inline: \\\"return true\\\") @trigger(config: {\\n    before: {type: Query, field: \\\"deny2\\\"}\\n  })\\n}\\n\\ntype Mutation {\\n  after(hypiResult: [HypiInput!]): Boolean @tan(type: Groovy, inline: \\\"\\\"\\\"\\n  gql('''mutation Create($values: HypiUpsertInputUnion!){upsert(values: $values){hypi{id}}}''', new java.util.LinkedHashMap())\\n  return true\\n  \\\"\\\"\\\")\\n  upsert(values: HypiUpsertInputUnion!):[Hypi!] @trigger(config: {\\n    before:{type: Query, field: \\\"allow\\\"},\\n    after:{type: Mutation, field: \\\"after\\\"}\\n  })\\n}\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\n{\\n  deny1\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"deny1\\\": null\\n  },\\n  \\\"errors\\\": [\\n    {\\n      \\\"message\\\": \\\"Exception while fetching data (/deny1) : io.hypi.arc.os.gql.HypiGraphQLException: Pre-condition given by Query.deny2 failed\\\",\\n      \\\"locations\\\": [\\n        {\\n          \\\"line\\\": 2,\\n          \\\"column\\\": 3\\n        }\\n      ],\\n      \\\"path\\\": [\\n        \\\"deny1\\\"\\n      ]\\n    }\\n  ]\\n}\\n\")))), mdx(\"p\", null, \"You can see the error message here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pre-condition given by Query.deny2 failed\"), \".\\nThe function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deny1\"), \" has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \" trigger which calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deny2\"), \". Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deny2\"), \" returns false, the function is not executed.\"), mdx(\"h2\", null, \"Function overriding\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upsert\"), \" function is overriden in the schema above so that a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@trigger\"), \" could be attached.\\nFunction overriding is allowed so long as all parameters of the new function match the original exactly.\\nIn this case, the built in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upsert\"), \" function had a trigger added to it. This can be used to arbitrarily allow or deny access as your app see fit to the function.\\nCare must be taken when overriding functions, upsert for example is used everywhere - breaking it will cause many things to fail.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#example","title":"Example"},{"url":"#function-overriding","title":"Function overriding"}]},"parent":{"__typename":"File","relativePath":"references/10-triggers.md"},"frontmatter":{"metaTitle":"Hypi Platform CRUD Documentation","metaDescription":"Hypi platform documentation for the core app's CRUD operations generated for each app"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f4d426c0-edaa-5bc5-8405-5830b7210903"}}}