{"componentChunkName":"component---src-templates-docs-js","path":"/references/math-api","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"584806d7-107a-5d92-b648-ead4d4b1fda5","title":"Math API","slug":"/references/09-math-api"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Math API\",\n  \"metaTitle\": \"Hypi Platform Math API Documentation\",\n  \"metaDescription\": \"Hypi platform documentation for the various Math operations available via the API\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"There are many cases where you want to do some standard math on your data.\\nOne approach to this is to get the value of the field and perform these operations client side.\\nWhile this works it is probably not safe in many cases.\\nWhat happens if two independent clients try to modify the same field? You will end up with the last operation succeeding and the first ones being lost.\"), mdx(\"p\", null, \"It is this kind of scenario that the Hypi Math API is designed to prevent.\"), mdx(\"h2\", null, \"Generated API\"), mdx(\"p\", null, \"For this documentation we will use the following schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"enum RatingType { POSITIVE, NEGATIVE}\\n\\ntype Rating {\\n  value: Float!\\n  type: RatingType!\\n}\\n\")), mdx(\"p\", null, \"From this, Hypi will generate the following input types for you:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"input  RatingMaths {\\n  value: MathInputFloat\\n}\\ninput MathInputFloat {\\n  div: Float\\n  times: Float\\n  minus: Float\\n  plus: Float\\n  hypi: HypiInput!\\n}\\n\")), mdx(\"p\", null, \"As you can see, only the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" field is included in the generated input type.\"), mdx(\"p\", null, \"The precedence of the operations follows \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Order_of_operations\"\n  }), \"BODMAS\"), \". For clarity if all fields are specified the precedence is:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Divsion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Multiplication\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Subtraction\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Addition\\ni.e. if you specify a value for all of the fields, this is the order in which they will apply.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Notice the numeric field\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Hypi generates an API which lets you perform math operations on numeric fields only.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Math operations can only be performed on an object that already exist.\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"As noted, the object must exist before you can perform math operations on it.\\nCreate a rating using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upsert\"), \".\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation Upsert($values: HypiUpsertInputUnion!) {\\n  upsert(values: $values) {\\n    id\\n  }\\n}\\n\\n# Variables\\n{\\n  \\\"values\\\": {\\n    \\\"Rating\\\": [\\n      {\\n        \\\"hypi\\\": {\\n          \\\"id\\\": \\\"rating1\\\"\\n        },\\n        \\\"value\\\": 3,\\n        \\\"type\\\": \\\"POSITIVE\\\"\\n      }\\n    ]\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"upsert\\\": [\\n      {\\n        \\\"id\\\": \\\"rating1\\\"\\n      }\\n    ]\\n  }\\n}\\n\")))), mdx(\"p\", null, \"Now you're able to execute math operations on the numeric field.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation {\\n  math(\\n    values: {\\n      Rating: [\\n        {\\n          value: {\\n            hypi: { id: \\\"rating1\\\" }\\n            div: 3\\n            times: 10\\n            minus: 2\\n            plus: 30\\n          }\\n        }\\n      ]\\n    }\\n  ) {\\n    id\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"math\\\": [\\n      {\\n        \\\"id\\\": \\\"rating1\\\"\\n      }\\n    ]\\n  }\\n}\\n\")))), mdx(\"p\", null, \"In this example, we are using all the math operators available in the API.\"), mdx(\"p\", null, \"Notice that we add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hypi: { id: \\\"rating1\\\" }\"), \" - this is how we told Hypi which rating object we're operating on.\"), mdx(\"p\", null, \"Notice as well that the query uses an array (the square brackets) so you can perform math operation on multiple objects (and even multiple types) in one request.\"), mdx(\"p\", null, \"The order of execution is as follows:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"value = 3 (we created the rating with a value of 3)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"3 / 3 = 1\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"1 * 10 = 10\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"10 - 2 = 8\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"8 + 30 = 38\")), mdx(\"p\", null, \"Now, if you query the rating value that was originally set to 3 when we created it.\\nIts value has changed to 38.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\n{\\n  get(type: Rating, id: \\\"rating1\\\"){\\n    ... on Rating {\\n      hypi{\\n        id\\n        created\\n        updated\\n      }\\n      value\\n      type\\n    }\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"get\\\": {\\n      \\\"hypi\\\": {\\n        \\\"id\\\": \\\"rating1\\\",\\n        \\\"created\\\": \\\"2020-07-15T09:20:55Z\\\",\\n        \\\"updated\\\": \\\"2020-07-15T09:23:23Z\\\"\\n      },\\n      \\\"value\\\": 38,\\n      \\\"type\\\": \\\"POSITIVE\\\"\\n    }\\n  }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#generated-api","title":"Generated API"},{"url":"#example","title":"Example"}]},"parent":{"__typename":"File","relativePath":"references/09-math-api.md"},"frontmatter":{"metaTitle":"Hypi Platform Math API Documentation","metaDescription":"Hypi platform documentation for the various Math operations available via the API"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"584806d7-107a-5d92-b648-ead4d4b1fda5"}}}