{"componentChunkName":"component---src-templates-docs-js","path":"/references/authorisation","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"cef51e5c-c0c7-5da6-af37-dd777468f153","title":"Authorisation","slug":"/references/03-authorisation"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Authorisation\",\n  \"metaTitle\": \"Hypi tutorial introducing authorisation\",\n  \"metaDescription\": \"Introduction to application instance authorisation on the Hypi platform\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Authorization\"\n  }), \"Authorisation\"), \" is the process which leads to a decision of whether access should be allowed or denied. In classic authorisation models there is a triple consisting of subject, object and action. For the most part, Hypi keeps these but enhances them a bit.\"), mdx(\"p\", null, \"Authorisation depends on checking whether an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Authentication\"\n  }), \"authenticated\"), \" subject is allowed by the available Permissions to access some resource (the object). Hypi's authorisation model is similar to but is not a compliant implementation of user\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/User-Managed_Access\"\n  }), \"managed access control\"), \" /UMA.\"), mdx(\"h2\", null, \"Concepts\"), mdx(\"p\", null, \" There are some concepts involved in Authorisation:\"), mdx(\"h3\", null, \"Subject\"), mdx(\"p\", null, \"A subject is the entity trying to perform an action or gain access to a resource.\"), mdx(\"h3\", null, \"Resource or Object\"), mdx(\"p\", null, \"A resource or object is the thing being protected. In Hypi, there are two primary things that can be protected.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Resource\"), \" - any object that exists in the Hypi platform\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scope\"), \" - Any GraphQL field OR any arbitrary URI\"), mdx(\"h3\", {\n    parentName: \"li\"\n  }, \"Policy\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A policy encapsulates two important pieces of information, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subject\"), \" in authorisation and whether access should be granted or denied i.e. the logic. There are a number of policies depending on the subject that Hypi supports. One of the main purposes of a policy is to promote re-use. Policies are intended to be created and re-used so that they can be kept as simple as possible. Where necessary, an AggregatePolicy can be used to group multiple policies.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GroupPolicy\"), \" - A group policy applies to list the list of Accounts or Organisations in the groups the policy links to.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type GroupPolicy implements Policy {\\n   groups: [Group!]\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RolePolicy\"), \" - A role policy applies to a list of Roles.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type RolePolicy implements Policy {\\n   roles : [Role!]!\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountPolicy\"), \" - Applies to a set of Accounts.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type AccountPolicy implements Policy {\\n   accounts: [Account!]\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RealmPolicy\"), \" - Applies to a set of Realms.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type RealmPolicy implements Policy {\\n   realms: [RealmLink!]\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TimePolicy\"), \" - Allows granting or denying access based on date or time\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type TimePolicy implements Policy {\\n   viewable before the given date\\n   from: DateTime\\n   to: DateTime\\n   clients: [AuthClient!]\\n   roles : [Role!]\\n   groups: [Group!]\\n   accounts: [Account!]\\n   realms: [RealmLink!]\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClientPolicy\"), \" - Controls access based on the client used to access a resource\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type ClientPolicy implements Policy {\\n   clients: [AuthClient!]\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AggregatePolicy\"), \" - allows grouping one or more policies\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type AggregatedPolicy implements Policy {\\n   policies: [Policy!]!\\n   decisionStrategy: DecisionStrategy\\n}\\n\")))), mdx(\"h3\", null, \"Permission\"), mdx(\"p\", null, \"A permission encapsulates the object involved in authorisation.\"), mdx(\"h3\", null, \"Update, Delete and Trash, Link and Unlinking a resource\"), mdx(\"p\", null, \"All of these operate on existing resources and as such generates an authorisation request which can type, scope and/or resource based permissions.\"), mdx(\"h3\", null, \"Searching for resources\"), mdx(\"p\", null, \"The platform uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/references/arcql\"\n  }), \"ArcQL\"), \" for finding data. All requests to get data, no matter how trivial the query, goes through ArcQL. During a search, resources that match that search are further filtered down to only those that the subject is allowed to see.\"), mdx(\"h3\", null, \"Implicit Permission\"), mdx(\"p\", null, \"If no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Permission\"), \" exist, the platform acts as if one is implicitly created with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountPolicy\"), \" which grants access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Account\"), \" which created the object.\\ni.e. the creator of an object has complete access to it by default - no one else does.\"), mdx(\"h2\", null, \"Examples\"), mdx(\"p\", null, \"Below demonstrates how to create a permission to let another account see an object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation {\\n  upsert(\\n    values: {\\n      Permission: [\\n        {\\n          name: \\\"Grant access to anonymous user\\\"\\n          decisionStrategy: Unanimous\\n          type: \\\"File\\\"\\n          resource: \\\"<file-id>\\\"\\n          scopes: [\\\"*\\\"]\\n          operationType: Query\\n          operations: [\\\"find\\\"]\\n          #includeAllAccounts: true, //wildcard so all accounts can access\\n          policies: [\\n            {\\n              hypi: { impl: \\\"AccountPolicy\\\" }\\n              name: \\\"Grant user anonymous access to my file\\\"\\n              logic: Positive\\n              accounts: [{ hypi: { id: \\\"anonymous\\\" } }]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ) {\\n    id\\n  }\\n}\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"type\"), \" is the GraphQL type that the permission will protect\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resource\"), \" is the ID of the object of the given type. The account creating the permission must be the owner or be given permission to modify the permission of the object\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"scopes\"), \" is an array of the fields in the type that the user is being given access to. They will get unauthorised if they try to access any other. `*\\ncan be used to give access to all fields.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"operationType\"), \" is the name of the operation type i.e. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Query\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Mutation\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Subscription\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"operations\"), \" is a list of fields in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"operationType\"), \" e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"find\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"upsert\"), \" or a custom method you've added\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"includeAllAccounts\"), \" is a boolean where, if true, the permission will apply to all accounts in the app instance.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"policies\"), \" is used to give access to specific users, groups etc instead of to all accounts. If this is missing then \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"includeAllAccounts\"), \" must be true, likewise if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"includeAllAccounts\"), \" is false, this must have at least one policy otherwise the permission will have no effect.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#introduction","title":"Introduction"},{"url":"#concepts","title":"Concepts","items":[{"url":"#subject","title":"Subject"},{"url":"#resource-or-object","title":"Resource or Object"},{"url":"#permission","title":"Permission"},{"url":"#update-delete-and-trash-link-and-unlinking-a-resource","title":"Update, Delete and Trash, Link and Unlinking a resource"},{"url":"#searching-for-resources","title":"Searching for resources"},{"url":"#implicit-permission","title":"Implicit Permission"}]},{"url":"#examples","title":"Examples"}]},"parent":{"__typename":"File","relativePath":"references/03-authorisation.md"},"frontmatter":{"metaTitle":"Hypi tutorial introducing authorisation","metaDescription":"Introduction to application instance authorisation on the Hypi platform"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"cef51e5c-c0c7-5da6-af37-dd777468f153"}}}