{"componentChunkName":"component---src-templates-docs-js","path":"/references/crud","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"f41fcbc7-578c-528c-b96b-194edcd90582","title":"CRUD","slug":"/references/02-crud"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CRUD\",\n  \"metaTitle\": \"Hypi Platform CRUD Documentation\",\n  \"metaDescription\": \"Hypi platform documentation for the core app's CRUD operations generated for each app\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"Every app can have one or more release. Each release has its own schema.\\nA schema is a set of GraphQL type definitions which define the data model you would like to have in your app.\"), mdx(\"p\", null, \"When you define a schema, Hypi automatically generates a number of APIs for you.\\nOne of those APIs is the CRUD API i.e. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"C\"), \"reate, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"R\"), \"ead, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"U\"), \"pdate, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\"), \"elete.\\nThe CRUD API in Hypi allows you to get data in and out of your apps.\\nThe platform will generate some GraphQL types for you.\"), mdx(\"p\", null, \"On this page we will use the following the GraphQL schema as an example.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Message {\\n    content: String!\\n    from: Account\\n    to: Account\\n}\\n\")), mdx(\"h2\", null, \"Generated types\"), mdx(\"p\", null, \"Hypi will generate a number of GraphQL elements from this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Message\"), \" type.\\nFirstly, in GraphQL this is called an \\\"output type\\\". When working with GraphQL there is a distinction between the types you query and the types you use to insert data.\\nIn Hypi, the input type and output type for the CRUD API has the same structure (same fields).\"), mdx(\"p\", null, \"If you wish, you can use a different input structure for your custom APIs. The types currently generated by Hypi are:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is true for any type in your schema\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Message\"), \" in this example, however the same thing happes for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all\"), \" types defined in your schema.\")), mdx(\"h3\", null, \"MessageInput\"), mdx(\"p\", null, \"An input type which matches the output type you created, including required fields\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"input MessageInput {\\n    hypi: HypiInput\\n    content: String!\\n    from: AccountInput\\n    to: AccountInput\\n}\\n\")), mdx(\"h3\", null, \"MessageInputOpt\"), mdx(\"p\", null, \"An input type which matches the output type you created but \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not\"), \" keep the required properties you defined.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"input MessageInputOpt {\\n  hypi: HypiInputOpt\\n  content: String\\n  from: AccountInputOpt\\n  to: AccountInputOpt\\n}\\n\")), mdx(\"h3\", null, \"MessageAggs\"), mdx(\"p\", null, \"An output type that is returned if you run an aggregation query over the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Message\"), \" data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type MessageAggs {\\n  content: AggOtherScalar\\n}\\n\")), mdx(\"p\", null, \"Aggregations can be performed on scalar fields hence \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content\"), \" is of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AggOtherScalar\"), \".\\nIf your type has a numeric field such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Float\"), \" then instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AggOtherScalar\"), \" the generated field will have type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AggInt\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AggFloat\"), \" respectively.\\nThese are described in more details in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/products/axiom/aggregations-api\"\n  }), \"aggregations API\"), \" documentation.\"), mdx(\"h3\", null, \"MessageFields\"), mdx(\"p\", null, \"An enum of the fields you defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Message\"), \" type.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"enum MessageFields {\\n    hypi\\n    content\\n    from\\n    to\\n}\\n\")), mdx(\"h2\", null, \"Insert and update data\"), mdx(\"p\", null, \"The first thing you may want to do once you create an instance is add some data.\\nIn Hypi there is one function that is used for both inserting new data and updating existing ones called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upsert\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"upsert(values: HypiUpsertInputUnion!): [Hypi!]!\\n\")), mdx(\"p\", null, \"Notice the argument \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values\"), \" is plural because it allows you to create or update multiple values in a single request.\\nIts type, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HypiUpsertInputUnion\"), \" is automatically generated from the types in your app.\\nIn this case it will look similar to this\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type HypiUpsertInputUnion {\\n  Message: [MessageInputOpt!]\\n  #...fields for other types here\\n  Account: [AccountInputOpt!]\\n}\\n\")), mdx(\"p\", null, \"In other words, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HypiUpsertInputUnion\"), \" has a field for every type in your app whether defined by you or inherited from an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/products/axiom/app-dependencies\"\n  }), \"app dependency\"), \".\"), mdx(\"h3\", null, \"Insert Example\"), mdx(\"p\", null, \"To add, you can use a query similar to the following\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation Upsert($values: HypiUpsertInputUnion!) {\\n  upsert(values: $values) {\\n    id\\n  }\\n}\\n\\n#GraphQL varibles\\n{\\n  \\\"values\\\": {\\n    \\\"Message\\\": [\\n      {\\n        \\\"content\\\": \\\"This is example message 1\\\"\\n      },\\n      {\\n        \\\"content\\\": \\\"This is example message 2\\\"\\n      }\\n    ]\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"upsert\\\": [\\n      {\\n        \\\"id\\\": \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\"\\n      },\\n      {\\n        \\\"id\\\": \\\"01ED7DZ7JR2QF7M2KEPF99Z93Y\\\"\\n      }\\n    ]\\n  }\\n}\\n\")))), mdx(\"h3\", null, \"Update Example\"), mdx(\"p\", null, \"To update data, you can use a query similar to the following. Notice that is is the same GraphQL query.\\nThe difference is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hypi.id\"), \" field is provided.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation Upsert($values: HypiUpsertInputUnion!) {\\n  upsert(values: $values) {\\n    id\\n  }\\n}\\n\\n#GraphQL varibles\\n{\\n  \\\"values\\\": {\\n    \\\"Message\\\": [\\n      {\\n        \\\"hypi\\\": {\\n          \\\"id\\\": \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\"\\n        },\\n        \\\"content\\\": \\\"This is example message 1 updated\\\"\\n      },\\n      {\\n        \\\"hypi\\\": {\\n          \\\"id\\\": \\\"01ED7DZ7JR2QF7M2KEPF99Z93Y\\\"\\n        },\\n        \\\"content\\\": \\\"This is example message 2 updated\\\"\\n      }\\n    ]\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"upsert\\\": [\\n      {\\n        \\\"id\\\": \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\"\\n      },\\n      {\\n        \\\"id\\\": \\\"01ED7DZ7JR2QF7M2KEPF99Z93Y\\\"\\n      }\\n    ]\\n  }\\n}\\n\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Keep in mind\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You are free to mix insert and update operations. The system will accept and process them correctly.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The order of execution is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"undefined\"), \". Hypi can choose to process multiple requests sent in one query in parallel.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"There is a limit of 25 items per request\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"There is a request timeout of 2 seconds within the entire operation must complete\")), mdx(\"h2\", null, \"Querying data\"), mdx(\"p\", null, \"Once data is in your app, the next step is getting it back out.\\nThere are two GraphQL functions for getting data out of the platform.\"), mdx(\"h3\", null, \"Get an object by ID\"), mdx(\"p\", null, \"The first is the get method. It allows you to get a single object using its ID.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\n{\\n  get(type: Message, id: \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\"){\\n    ... on Message {\\n      hypi{\\n        id\\n        created\\n        updated\\n      }\\n      content\\n    }\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"get\\\": {\\n      \\\"hypi\\\": {\\n        \\\"id\\\": \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\",\\n        \\\"created\\\": \\\"2020-07-14T07:49:04Z\\\",\\n        \\\"updated\\\": \\\"2020-07-14T07:53:11Z\\\"\\n      },\\n      \\\"content\\\": \\\"This is example message 1 updated\\\"\\n    }\\n  }\\n}\\n\")))), mdx(\"h3\", null, \"Find objects that match a query\"), mdx(\"p\", null, \"The second approach to getting data out of your app is by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"find\"), \" function.\\nUnlike the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" function, this returns a list of objects matching the filter provided.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"find(\\n    type: HypiMutationType!\\n    arcql: String!\\n    first: Int\\n    after: String\\n    last: Int\\n    before: String\\n    includeTrashed: Boolean\\n): HypiFilterConnection!\\n\")), mdx(\"p\", null, \"This function has a number of parameters that enable you to filter and page through data.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Parameter\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Example\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"type\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The type that you want to find data for\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Message\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Account\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"arcql\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The ArcQL that will be used to filter the data\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"content \\\\* 'example.*updated'\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"first\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Limit the number of results returned when used with the \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"after\"), \" parameter\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"after\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Return data after this token. This is the ID of an object returned previously that you'd like to get results following it\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"last\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Limit the number of results returned when used with the \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"before\"), \" parameter\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"before\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Return data before this token. This is the ID of an object returned previously that you'd like to get results before it\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"includeTrashed\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If true, data that was marked as \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"trashed\"), \" will be included in the results as well, \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \" by default.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))))), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\n{\\n  find(type: Message, arcql: \\\"*\\\") {\\n    edges {\\n      cursor\\n      node {\\n        ... on Message {\\n          hypi {\\n            id\\n            created\\n            updated\\n          }\\n          content\\n        }\\n      }\\n    }\\n    pageInfo {\\n      hasPreviousPage\\n      hasNextPage\\n      startCursor\\n      endCursor\\n      pageLimit\\n      previousOffsets\\n      nextOffsets\\n    }\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"find\\\": {\\n      \\\"edges\\\": [\\n        {\\n          \\\"cursor\\\": \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\",\\n          \\\"node\\\": {\\n            \\\"hypi\\\": {\\n              \\\"id\\\": \\\"01ED7DZ7JHDRGTWHS4GXKE17BT\\\",\\n              \\\"created\\\": \\\"2020-07-14T07:49:04Z\\\",\\n              \\\"updated\\\": \\\"2020-07-14T07:53:11Z\\\"\\n            },\\n            \\\"content\\\": \\\"This is example message 1 updated\\\"\\n          }\\n        },\\n        {\\n          \\\"cursor\\\": \\\"01ED7DZ7JR2QF7M2KEPF99Z93Y\\\",\\n          \\\"node\\\": {\\n            \\\"hypi\\\": {\\n              \\\"id\\\": \\\"01ED7DZ7JR2QF7M2KEPF99Z93Y\\\",\\n              \\\"created\\\": \\\"2020-07-14T07:49:04Z\\\",\\n              \\\"updated\\\": \\\"2020-07-14T07:53:11Z\\\"\\n            },\\n            \\\"content\\\": \\\"This is example message 2 updated\\\"\\n          }\\n        }\\n      ],\\n      \\\"pageInfo\\\": {\\n        \\\"hasPreviousPage\\\": false,\\n        \\\"hasNextPage\\\": false,\\n        \\\"startCursor\\\": \\\"FIRST\\\",\\n        \\\"endCursor\\\": \\\"LAST\\\",\\n        \\\"pageLimit\\\": 25,\\n        \\\"previousOffsets\\\": [],\\n        \\\"nextOffsets\\\": []\\n      }\\n    }\\n  }\\n}\\n\")))), mdx(\"h2\", null, \"Deleting data\"), mdx(\"p\", null, \"There are two types of deletions supported in the platform.\\nThe first is known as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"soft delete\"), \" where data is not really deleted but instead \\\"marked\\\" as deleted.\\nUse the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trash\"), \" function to perform a soft delete.\"), mdx(\"p\", null, \"The second type of delete is irreversible. The data is permanently deleted from the system and cannot be undone.\\nUse the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteScalar\"), \" functions to permanently delete data. The difference between these two is explained below.\"), mdx(\"h3\", null, \"trash\"), mdx(\"p\", null, \"In some cases you want your data to appear as if it is deleted but have the ability to restore it.\\nFor example, if you were storing email data. There is often a \\\"recycle\\\" or \\\"trash\\\" folder.\\nBy using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trash\"), \" function, you can achieve the same thing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"trash(type: HypiMutationType!, arcql: String!): Int!\\n\")), mdx(\"p\", null, \"The function returns the number of records that were marked as trash.\"), mdx(\"h3\", null, \"Example\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation {\\n  trash(type: Message, arcql: \\\"hypi.id = '01ED7DZ7JHDRGTWHS4GXKE17BT'\\\")\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"trash\\\": 1\\n  }\\n}\\n\")))), mdx(\"p\", null, \"If you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"find\"), \" queries now, by default they will not return this object.\\nYou must set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"includeTrashed\"), \" parameter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" to have them return the trashed object.\"), mdx(\"h3\", null, \"untrash\"), mdx(\"p\", null, \"The opposite of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trash\"), \" function is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"untrash\"), \". Use this function to remove the trash marker from data that were previously marked as trash.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"untrash(type: HypiMutationType!, arcql: String!): Int!\\n\")), mdx(\"p\", null, \"The function returns the number of records that were marked untrashed.\"), mdx(\"h3\", null, \"Example\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation {\\n  untrash(type: Message, arcql: \\\"hypi.id = '01ED7DZ7JHDRGTWHS4GXKE17BT'\\\")\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"untrash\\\": 1\\n  }\\n}\\n\")))), mdx(\"h3\", null, \"delete\"), mdx(\"p\", null, \"If you want to delete data permanently, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"delete(type: HypiMutationType!, arcql: String!): Int!\\n\")), mdx(\"p\", null, \"The function returns the number of records that were marked deleted.\"), mdx(\"h3\", null, \"Example\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation {\\n  delete(type: Message, arcql: \\\"hypi.id = '01ED7DZ7JHDRGTWHS4GXKE17BT'\\\")\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"delete\\\": 1\\n  }\\n}\\n\")))), mdx(\"h3\", null, \"deleteScalar\"), mdx(\"p\", null, \"List fields in Hypi are not stored directly with the other scalar fields.\\nThis allows you to be able to add unlimited number of items to a list field.\\nAs a result of this, f you want to delete data permanently from a scalar list, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteScalar\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"deletedScalars(\\nfrom: HypiMutationType!\\nfield: String!\\nvalues: [String!]!\\nid: String!\\n): Int!\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Parameter\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Example\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"from\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The type which has the scalar list field you want to delete values from\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Message\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Account\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"field\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The name of the field on the type\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"values\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The list of scalar values to delete from the list\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The ID of the object from which to delete the scalar values\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))))), mdx(\"p\", null, \"The function returns the number of records that were marked deleted.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#generated-types","title":"Generated types","items":[{"url":"#messageinput","title":"MessageInput"},{"url":"#messageinputopt","title":"MessageInputOpt"},{"url":"#messageaggs","title":"MessageAggs"},{"url":"#messagefields","title":"MessageFields"}]},{"url":"#insert-and-update-data","title":"Insert and update data","items":[{"url":"#insert-example","title":"Insert Example"},{"url":"#update-example","title":"Update Example"}]},{"url":"#querying-data","title":"Querying data","items":[{"url":"#get-an-object-by-id","title":"Get an object by ID"},{"url":"#find-objects-that-match-a-query","title":"Find objects that match a query"}]},{"url":"#deleting-data","title":"Deleting data","items":[{"url":"#trash","title":"trash"},{"url":"#example","title":"Example"},{"url":"#untrash","title":"untrash"},{"url":"#example-1","title":"Example"},{"url":"#delete","title":"delete"},{"url":"#example-2","title":"Example"},{"url":"#deletescalar","title":"deleteScalar"}]}]},"parent":{"__typename":"File","relativePath":"references/02-crud.md"},"frontmatter":{"metaTitle":"Hypi Platform CRUD Documentation","metaDescription":"Hypi platform documentation for the core app's CRUD operations generated for each app"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f41fcbc7-578c-528c-b96b-194edcd90582"}}}