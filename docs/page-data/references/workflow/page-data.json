{"componentChunkName":"component---src-templates-docs-js","path":"/references/workflow","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"26d3728e-ccff-516e-b6d5-9ab59ebaffec","title":"Workflows","slug":"/references/07-workflow"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Workflows\",\n  \"metaTitle\": \"Hypi Platform CRUD Documentation\",\n  \"metaDescription\": \"Hypi platform documentation for the core app's CRUD operations generated for each app\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"When you have a situation where one event can lead to potentially many other events, a workflow can be used to help simplify how the work is done.\\nHypi workflows enable steps defined by your app to execute in the order you specify.\"), mdx(\"p\", null, \"For this page we've added the following schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type MyType {\\n  a: Int\\n  previous: Json\\n  session: WorkflowSession,\\n  params: Json\\n}\\n\\ntype Query {\\n  step0: Int @tan(type:Groovy, inline: \\\"17\\\")\\n  step1(a:Int, b: Int): Int @tan(type:Groovy, inline: \\\"a * b\\\")\\n  step3(a: Int, previous: String, session: WorkflowSessionInput, params: Json): MyType @tan(type:Groovy, inline: \\\"\\\"\\\"\\n  return [\\n    \\\"a\\\": a,\\n    \\\"previous\\\": previous,\\n    \\\"session\\\": session,\\n    \\\"params\\\": params\\n  ]\\n  \\\"\\\"\\\")\\n  calculateStuff(a: Int, b: Int): MyType @workflow(name: \\\"calculate-stuff\\\")\\n}\\n\\ntype Mutation {\\n  #For no reason other than to test mutation steps - it's entirely up to the author to decide if their custom function is mutation or not\\n  step2(b:Int, previous: Int): String @tan(type:Groovy, inline: \\\"'v:' + (b + previous)\\\")\\n}\\n\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"workflow\"), \" directive is Hypi's mechanism for enabling you to trigger a given workflow.\\nIn thie case we've defined \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calculateStuff\"), \" which, when called will execute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calculate-stuff\"), \" workflow.\"), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Once defined, Workflow functions can be executed just like any other.\\nThe first thing required is that you must create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Workflow\"), \" object.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nmutation Upsert($values: HypiUpsertInputUnion!) {\\n  upsert(values: $values) {\\n    id\\n  }\\n}\\n# Data\\n{\\n  \\\"values\\\": {\\n    \\\"Workflow\\\": [\\n      {\\n        \\\"name\\\": \\\"calculate-stuff\\\",\\n        \\\"steps\\\": [\\n          {\\n            \\\"name\\\": \\\"step0\\\",\\n            \\\"order\\\": 0,\\n            \\\"fn\\\": {\\n              \\\"type\\\": \\\"Query\\\",\\n              \\\"field\\\": \\\"step0\\\"\\n            }\\n          },\\n          {\\n            \\\"name\\\": \\\"step1\\\",\\n            \\\"order\\\": 1,\\n            \\\"fn\\\": {\\n              \\\"type\\\": \\\"Query\\\",\\n              \\\"field\\\": \\\"step1\\\"\\n            }\\n          },\\n          {\\n            \\\"name\\\": \\\"step2\\\",\\n            \\\"order\\\": 2,\\n            \\\"fn\\\": {\\n              \\\"type\\\": \\\"Mutation\\\",\\n              \\\"field\\\": \\\"step2\\\"\\n            }\\n          },\\n          {\\n            \\\"name\\\": \\\"step3\\\",\\n            \\\"order\\\": 3,\\n            \\\"fn\\\": {\\n              \\\"type\\\": \\\"Query\\\",\\n              \\\"field\\\": \\\"step3\\\",\\n              \\\"selection\\\": \\\"a previous params session{data{stepName,stepResult}}\\\"\\n            }\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"upsert\\\": [\\n      {\\n        \\\"id\\\": \\\"01EDDSH2G07G04D6KHF79R74JT\\\"\\n      }\\n    ]\\n  }\\n}\\n\")))), mdx(\"p\", null, \"Once created, the workflow can then be executed.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Important\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The name of the workflow is important. Notice it is used in the function definition \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@workflow(name: \\\"calculate-stuff\\\")\"), \". This is the same name used in the object created.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The order field in each step determines when that step is executed\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fn\"), \" field is a reference to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mutation\"), \" function that should be executed for that step.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you use a variable called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"previous\"), \" that is the same type as the output from the previous step, Hypi will pass the output from the previous step as the value of this parameter.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"session: WorkflowSessionInput\"), \" variable, Hypi will pass the session object. It will contain the results of all the steps executed so far.\")), mdx(\"p\", null, \"Finally, to use this workflow, execute it like any other function.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#GraphQL query\\nquery Q($a: Int, $b: Int){calculateStuff(a: $a, b:$b){\\n  a previous params\\n  session{\\n    data{\\n        stepName\\n        stepResult\\n      }\\n    }\\n  }\\n}\\n# Data\\n{\\n  \\\"a\\\": 10,\\n  \\\"b\\\": 2\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"calculateStuff\\\": {\\n      \\\"a\\\": 10,\\n      \\\"previous\\\": \\\"v:22\\\",\\n      \\\"params\\\": {\\n        \\\"a\\\": 10,\\n        \\\"b\\\": 2\\n      },\\n      \\\"session\\\": {\\n        \\\"data\\\": [\\n          {\\n            \\\"stepName\\\": \\\"step0\\\",\\n            \\\"stepResult\\\": 17\\n          },\\n          {\\n            \\\"stepName\\\": \\\"step1\\\",\\n            \\\"stepResult\\\": 20\\n          },\\n          {\\n            \\\"stepName\\\": \\\"step2\\\",\\n            \\\"stepResult\\\": \\\"v:22\\\"\\n          }\\n        ]\\n      }\\n    }\\n  }\\n}\\n\")))), mdx(\"p\", null, \"This example is very simple, but you can make your workflow do anything necessary for your app.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#example","title":"Example"}]},"parent":{"__typename":"File","relativePath":"references/07-workflow.md"},"frontmatter":{"metaTitle":"Hypi Platform CRUD Documentation","metaDescription":"Hypi platform documentation for the core app's CRUD operations generated for each app"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"26d3728e-ccff-516e-b6d5-9ab59ebaffec"}}}