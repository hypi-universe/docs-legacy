{"componentChunkName":"component---src-templates-docs-js","path":"/tutorials/dateGranularity","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"a9f65bbd-acc8-5c62-aa42-3d94559425cf","title":"Timeseries Aggregations with Date Granularity","slug":"/tutorials/04-dateGranularity"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Timeseries Aggregations with Date Granularity\",\n  \"metaTitle\": \"Timeseries Aggregations with Date Granularity\",\n  \"metaDescription\": \"Hypi tutorial showing how to do timeseries aggregations using the dateGranularity feature\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Timeseries Aggregations with Date Granularity\"), mdx(\"p\", null, \"In this tutorial, we will work with the following schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type ActorRatings {\\n    rating: Float!\\n    gender: Gender!\\n}\\nenum Gender {\\n    Male\\n    Female\\n    NotSpecified\\n}\\n\")), mdx(\"p\", null, \"to  demonstrate how to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateGranularity\"), \" parameter to group numeric fields over time. \"), mdx(\"p\", null, \"First is looking into the aggregate types for the type that you want to aggregate.\"), mdx(\"h2\", null, \"Aggregation Types\"), mdx(\"p\", null, \"For each type in our schema, we have two aggregations that we can perform on them.\\nThe first one is named \\\"\", \"[our_type]\", \"\\\" and the second one is named \\\"\", \"[our_type]\", \"With\\\".\"), mdx(\"p\", null, \"Looking at our schema, our aggregations will be\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"actorRatings(\\n    where: String\\n): ActorRatingsAggs\\n\")), mdx(\"p\", null, \"and\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"actorRatingsWith(\\n    where: String\\n    groupBy: [ActorRatingsGroupByOptions!]!\\n    having: String\\n    first: Int\\n    after: String\\n    last: Int\\n    before: String\\n    includeTrashed: Boolean\\n): [ActorRatingsAggs]\\n\")), mdx(\"p\", null, \"In this tutorial we will focus on using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actorRatingsWith\"), \" since it is the one that allows grouping data.\"), mdx(\"h2\", null, \"Using GroupBy with dateGranularity\"), mdx(\"p\", null, \"Now, let's get into some examples.\"), mdx(\"p\", null, \"Let's say I want to get the  \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"average\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rating\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for each day\"), \" for the actor with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hypi.id='actor1'\"), \".\\nThe aggregation looks like this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  aggregate {\\n    actorRatingsWith(\\n      where: \\\"hypi.id='actor1'\\\"\\n      groupBy: [{ field: hypi_created, dateGranularity: DAYS }]) {\\n      rating {\\n        avg\\n        groupValues{\\n          key\\n          value\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Here we are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actorRatingsWith\"), \" aggregation with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"groupBy\"), \" parameter pointing at the field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hypi_created\"), \" and passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateGranularity: DAYS\"), \" parameter to indicate that we want to group by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hypi_created\"), \" field and have the results grouped \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"specifically\"), \" by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"days\"), \".\"), mdx(\"p\", null, \"As for the data we want to be returned, we specify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avg\"), \" and then the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"groupValues\"), \" so we can know the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"value of the field\"), \" we are grouping by - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hypi_created\"), \". \"), mdx(\"blockquote\", null, mdx(\"h4\", {\n    parentName: \"blockquote\"\n  }, \"Required selections\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note that the groupValues field is a mandatory selection when using the dateGranularity parameter. This means it \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MUST\"), \" be one of the fields you select.\\nOtherwise you will receive an error.\")), mdx(\"p\", null, \"The result will look like this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"aggregate\\\": {\\n      \\\"actorRatingsWith\\\": [\\n        {\\n          \\\"rating\\\": {\\n            \\\"avg\\\": 4.5,\\n            \\\"groupValues\\\": [\\n              {\\n                \\\"key\\\": \\\"hypi_created\\\",\\n                \\\"value\\\": \\\"2020-07-09\\\"\\n              }\\n            ]\\n          }\\n        },\\n        {\\n          \\\"rating\\\": {\\n            \\\"avg\\\": 4.2,\\n            \\\"groupValues\\\": [\\n              {\\n                \\\"key\\\": \\\"hypi_created\\\",\\n                \\\"value\\\": \\\"2020-07-10\\\"\\n              }\\n            ]\\n          }\\n        },\\n        {\\n          \\\"rating\\\": {\\n            \\\"avg\\\": 3.3,\\n            \\\"groupValues\\\": [\\n              {\\n                \\\"key\\\": \\\"hypi_created\\\",\\n                \\\"value\\\": \\\"2020-07-11\\\"\\n              }\\n            ]\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"As you can see, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" field of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"groupValues\"), \", is displaying dates with different days and the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"average\"), \" is calculated for that day.\"), mdx(\"p\", null, \"Similarly we can use all the other aggregations: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sum\"), \".\"), mdx(\"p\", null, \"Also, just as we did \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DAYS\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateGranularity\"), \" in this tutorial, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HOURS\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MINUTES\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SECONDS\"), \" as for your needs.\"), mdx(\"p\", null, \"In conclusion, aggregations using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateGranularity\"), \" boils down to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the right aggregation type - which is named \\\"\", \"[your_type]\", \"With\\\".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"groupBy\"), \" to specify which \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"field\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dateGranularity\"), \" you would like to group by. In our example \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hypi_created\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DAYS\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"where\"), \" if you want to filter before calculating - it is an \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/reference/arcql\"\n  }), \"ArcQL\"), \" string. In our example - \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hypi.id='actor1'\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Adding the field that you want to aggregate. In our example \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rating\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Choosing what you want to calculate. In our example \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"avg\"), \" (others include \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"count\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"min\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"max\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sum\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Adding \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"groupValues\"), \" so you can see the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"value of the field\"), \" that you grouped by in the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"result set\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#timeseries-aggregations-with-date-granularity","title":"Timeseries Aggregations with Date Granularity","items":[{"url":"#aggregation-types","title":"Aggregation Types"},{"url":"#using-groupby-with-dategranularity","title":"Using GroupBy with dateGranularity"}]}]},"parent":{"__typename":"File","relativePath":"tutorials/04-dateGranularity.md"},"frontmatter":{"metaTitle":"Timeseries Aggregations with Date Granularity","metaDescription":"Hypi tutorial showing how to do timeseries aggregations using the dateGranularity feature"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"API & References"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tutorials/01-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/references/00-app","title":"Apps"}}},{"node":{"fields":{"slug":"/tutorials/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/references/01-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/references/03-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/references/04-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/references/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/references/11-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/references/08-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/references/10-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/references/09-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/references/15-oauth2-login","title":"OAuth2 Login"}}},{"node":{"fields":{"slug":"/references/13-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/references/16-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/references/12-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/getting-started/01-scratch","title":"Starting from scratch"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/03-query","title":"Queries"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/04-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/05-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/06-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/07-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/references/14-file-upload","title":"File upload API"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/08-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/faq","title":"FAQs"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}},{"node":{"fields":{"slug":"/references/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/references/05-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/references/06-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/getting-started/02-angular","title":"Hypi + Angular"}}},{"node":{"fields":{"slug":"/tutorials/00-graphql/02-schema-and-types","title":"Schema & Types"}}},{"node":{"fields":{"slug":"/references/02-arcql","title":"ArcQL Filtering"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a9f65bbd-acc8-5c62-aa42-3d94559425cf"}}}